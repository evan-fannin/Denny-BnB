{"ast":null,"code":"var _jsxFileName = \"/Users/evanfannin/projects/airbnb_clone/frontend/src/pages/booking/bookingCalendar.js\";\nimport React, { Component } from \"react\";\nimport Calendar from \"react-calendar\";\nimport axiosInstance from '../../axios';\nimport Button from \"../../components/button\";\nimport './calendar.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class BookingCalendar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.tileDisabled = _ref => {\n      let {\n        activeStartDate,\n        date,\n        view\n      } = _ref;\n\n      if (date.valueOf() < Date.now()) {\n        return true;\n      }\n\n      for (let i = 0; i < this.state.disabledDates.length; i++) {\n        let disabledDate = this.state.disabledDates[i];\n\n        if (date.getFullYear() == disabledDate.getFullYear() && date.getMonth() == disabledDate.getMonth() && date.getDate() == disabledDate.getDate()) {\n          return true;\n        }\n      }\n\n      return false; //        else { // Second calendar click\n      //            var clickedDate = this.state.startDate;\n      //            var nextBookedDate = this.state.nextBookedDate;\n      //\n      //            if (nextBookedDate === null) return date <= clickedDate;\n      //            return date >= nextBookedDate || date <= clickedDate;\n      //        }\n    };\n\n    this.state = {\n      firstClick: true,\n      startDate: null,\n      nextBookedDate: null,\n      endDate: null,\n      disabledDates: []\n    };\n    this.houseName = this.props.houseName;\n  }\n\n  async componentDidMount() {\n    const response = await axiosInstance.get(\"/get-bookings?houseName=\" + this.houseName);\n    const data = response.data;\n    console.log(data);\n    this.setState({\n      disabledDates: this.generateBookedDates(data)\n    });\n  }\n\n  handleSubmitDates() {\n    if (this.state.startDate === null || this.state.endDate === null) {\n      alert(\"Select a date range to make a reservation.\");\n      return;\n    }\n\n    this.props.handleRedirect(this.state.startDate, this.state.endDate); //        const formData = new FormData();\n    //        formData.append(\"start_date\", this.state.startDate);\n    //        formData.append(\"end_date\", this.state.endDate);\n    //        formData.append(\"house_name\", this.houseName);\n    //\n    //        const requestOptions = {\n    //            method: 'POST',\n    //            body: formData\n    //        };\n    //\n    //        fetch(\"/api/create-booking/\", requestOptions)\n    //        .then(response => response.json())\n    //        .then(data => {\n    //            console.log(data);\n    //            this.props.handleRedirect();\n    //        });\n  }\n\n  handleClickDay(value, event) {\n    if (this.state.firstClick === true) {\n      this.setState({\n        startDate: value,\n        nextBookedDate: this.getNextBookedDate(value),\n        endDate: null\n      });\n    } else {\n      if (this.state.nextBookedDate != null && value > this.state.nextBookedDate) {\n        alert(\"Some dates in your range are already booked.\\n\" + \"Please select a valid range.\");\n      } else {\n        this.setState({\n          endDate: value\n        });\n      }\n    }\n\n    this.setState({\n      firstClick: !this.state.firstClick\n    });\n  }\n\n  parseMonth(string) {\n    const abbreviations = {\n      \"Jan\": 1,\n      \"Feb\": 2,\n      \"Mar\": 3,\n      \"Apr\": 4,\n      \"May\": 5,\n      \"Jun\": 6,\n      \"Jul\": 7,\n      \"Aug\": 8,\n      \"Sep\": 9,\n      \"Oct\": 10,\n      \"Nov\": 11,\n      \"Dec\": 12\n    };\n    return abbreviations[string].toString();\n  }\n\n  generateBookedDates(data) {\n    const bookedDates = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const startDate = new Date(data[i]['start_date']);\n      const endDate = new Date(data[i]['end_date']);\n      var iterDate = new Date(startDate.valueOf());\n      const bookedRange = [];\n      bookedRange.push(startDate);\n\n      while (iterDate < endDate) {\n        iterDate.setDate(iterDate.getDate() + 1);\n        const date = new Date(iterDate.valueOf());\n        bookedRange.push(date);\n      }\n\n      bookedDates.push(...bookedRange);\n    }\n\n    return bookedDates.sort((a, b) => {\n      return a - b;\n    });\n  }\n\n  getNextBookedDate(clickedDate) {\n    var nextBookedDate = (() => {\n      for (let i = 0; i < this.state.disabledDates.length; i++) {\n        let disabledDate = this.state.disabledDates[i];\n        if (disabledDate > clickedDate) return disabledDate;\n      }\n\n      return null;\n    })();\n\n    return nextBookedDate;\n  } //    handleChange(value, event) {\n  //        const [startYear, startMonth, startDay] = this.parseDate(value[0])\n  //        const [endYear, endMonth, endDay] = this.parseDate(value[1])\n  //\n  //\n  //\n  //        this.setState({\n  //            startDate: [startYear, startMonth, startDay],\n  //            endDate: [endYear, endMonth, endDay]\n  //        });\n  //    }\n  //    parseDate(dateObject) {\n  //        const stringArray = dateObject.toString().split(\" \");\n  //        const year = stringArray[3];\n  //        const month = this.parseMonth(stringArray[1]);\n  //        const day = stringArray[2];\n  //        return new Date(year, month - 1, day);\n  //    }\n  // Not an efficient function!\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      children: [/*#__PURE__*/_jsxDEV(Calendar, {\n        style: {\n          display: \"flex\"\n        },\n        minDetail: \"month\",\n        next2Label: null,\n        prev2Label: null,\n        selectRange: true,\n        onClickDay: (value, event) => this.handleClickDay(value, event),\n        tileDisabled: this.tileDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.handleSubmitDates(),\n        children: \"Reserve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/evanfannin/projects/airbnb_clone/frontend/src/pages/booking/bookingCalendar.js"],"names":["React","Component","Calendar","axiosInstance","Button","BookingCalendar","constructor","props","tileDisabled","activeStartDate","date","view","valueOf","Date","now","i","state","disabledDates","length","disabledDate","getFullYear","getMonth","getDate","firstClick","startDate","nextBookedDate","endDate","houseName","componentDidMount","response","get","data","console","log","setState","generateBookedDates","handleSubmitDates","alert","handleRedirect","handleClickDay","value","event","getNextBookedDate","parseMonth","string","abbreviations","toString","bookedDates","iterDate","bookedRange","push","setDate","sort","a","b","clickedDate","render","display"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Calendar from \"react-calendar\";\n\nimport axiosInstance from '../../axios';\n\nimport Button from \"../../components/button\";\n\nimport './calendar.scss';\n\n\nexport default class BookingCalendar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstClick: true,\n            startDate: null,\n            nextBookedDate: null,\n            endDate: null,\n            disabledDates: []\n        };\n        this.houseName = this.props.houseName;\n    }\n\n    async componentDidMount() {\n        const response = await axiosInstance.get(\"/get-bookings?houseName=\" + this.houseName);\n        const data = response.data;\n        console.log(data);\n        this.setState({disabledDates: this.generateBookedDates(data)});\n    }\n\n    handleSubmitDates() {\n        if (this.state.startDate === null || this.state.endDate === null) {\n            alert(\"Select a date range to make a reservation.\");\n            return\n        }\n        this.props.handleRedirect(this.state.startDate, this.state.endDate);\n//        const formData = new FormData();\n//        formData.append(\"start_date\", this.state.startDate);\n//        formData.append(\"end_date\", this.state.endDate);\n//        formData.append(\"house_name\", this.houseName);\n//\n//        const requestOptions = {\n//            method: 'POST',\n//            body: formData\n//        };\n//\n//        fetch(\"/api/create-booking/\", requestOptions)\n//        .then(response => response.json())\n//        .then(data => {\n//            console.log(data);\n//            this.props.handleRedirect();\n//        });\n\n    }\n\n    handleClickDay(value, event) {\n        if (this.state.firstClick === true) {\n            this.setState({startDate: value,\n            nextBookedDate: this.getNextBookedDate(value),\n            endDate: null});\n        }\n        else {\n            if (this.state.nextBookedDate != null && value > this.state.nextBookedDate) {\n                alert(\"Some dates in your range are already booked.\\n\" +\n                \"Please select a valid range.\");\n            }\n            else {\n                this.setState({endDate: value});\n            }\n        }\n        this.setState({firstClick: !this.state.firstClick})\n    }\n\n    parseMonth(string) {\n        const abbreviations = {\n            \"Jan\": 1,\n            \"Feb\": 2,\n            \"Mar\": 3,\n            \"Apr\": 4,\n            \"May\": 5,\n            \"Jun\": 6,\n            \"Jul\": 7,\n            \"Aug\": 8,\n            \"Sep\": 9,\n            \"Oct\": 10,\n            \"Nov\": 11,\n            \"Dec\": 12\n        }\n\n        return abbreviations[string].toString()\n    }\n\n    generateBookedDates(data) {\n        const bookedDates = []\n        for (let i = 0; i < data.length; i++) {\n            const startDate = new Date(data[i]['start_date']);\n            const endDate = new Date(data[i]['end_date']);\n            var iterDate = new Date(startDate.valueOf());\n            const bookedRange = [];\n            bookedRange.push(startDate);\n\n            while (iterDate < endDate) {\n                iterDate.setDate(iterDate.getDate() + 1);\n                const date = new Date(iterDate.valueOf());\n                bookedRange.push(date);\n            }\n            bookedDates.push(...bookedRange);\n        }\n\n        return (bookedDates.sort((a, b) => {\n                return a - b;\n            }));\n    }\n\n    getNextBookedDate(clickedDate) {\n        var nextBookedDate = (() => {\n                for (let i = 0; i < this.state.disabledDates.length; i++) {\n                    let disabledDate = this.state.disabledDates[i];\n                    if (disabledDate > clickedDate) return disabledDate;\n                }\n                return null\n            })();\n        return nextBookedDate;\n    }\n\n//    handleChange(value, event) {\n//        const [startYear, startMonth, startDay] = this.parseDate(value[0])\n//        const [endYear, endMonth, endDay] = this.parseDate(value[1])\n//\n//\n//\n//        this.setState({\n//            startDate: [startYear, startMonth, startDay],\n//            endDate: [endYear, endMonth, endDay]\n//        });\n//    }\n\n//    parseDate(dateObject) {\n\n//        const stringArray = dateObject.toString().split(\" \");\n//        const year = stringArray[3];\n//        const month = this.parseMonth(stringArray[1]);\n//        const day = stringArray[2];\n//        return new Date(year, month - 1, day);\n//    }\n\n    // Not an efficient function!\n    tileDisabled = ({activeStartDate, date, view}) => {\n        if (date.valueOf() < Date.now()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.state.disabledDates.length; i++) {\n            let disabledDate = this.state.disabledDates[i];\n\n            if (date.getFullYear() == disabledDate.getFullYear() &&\n            (date.getMonth()) == disabledDate.getMonth() &&\n            date.getDate() == disabledDate.getDate()) {\n                return true;\n            }\n        }\n        return false;\n//        else { // Second calendar click\n//            var clickedDate = this.state.startDate;\n//            var nextBookedDate = this.state.nextBookedDate;\n//\n//            if (nextBookedDate === null) return date <= clickedDate;\n//            return date >= nextBookedDate || date <= clickedDate;\n//        }\n    }\n\n    render() {\n        return(\n        <Grid container spacing={1}>\n                <Calendar style={{display: \"flex\"}}\n                minDetail='month'\n                next2Label={null}\n                prev2Label={null}\n                selectRange={true}\n                onClickDay={(value, event) => this.handleClickDay(value, event)}\n                tileDisabled={this.tileDisabled}\n                />\n                <Button\n                onClick={() => this.handleSubmitDates()}\n                >\n                Reserve\n                </Button>\n        </Grid>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}